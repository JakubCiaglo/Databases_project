---
title: "Projekt z Baz Danych ‚Äì Raport Ko≈Ñcowy"
format:
  html:
    toc: true
    number-sections: true
    code-fold: true
    code-summary: "Rozwi≈Ñ kod"
    theme:
      light: flatly
      dark: darkly
page-layout: full
---

# Autorzy

- Jakub CiƒÖg≈Ço  
- Mateusz ƒÜwiek  
- Marek Dworaczyk  
- Rafa≈Ç G≈Çodek

# Importy
```{python}
import random
import math
from datetime import date, datetime, timedelta, time
import numpy as np
import pandas as pd
import mysql.connector
import plotly.express as px
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import matplotlib.colors as colors
from scipy import stats
```

```{python}

con = mysql.connector.connect(
    host = "giniewicz.it",
    user = "team13",
    password = "te@mlie",
    database = "team13"
)
```

# Analiza danych

## Problem pierwszy

Pytanie: Znajd≈∫ najpopularniejsze rodzaje wypraw, por√≥wnaj koszta i zyski, czy sƒÖ op≈Çacalne?

```{python}
query = """
SELECT
    tt.name AS 'Rodzaj wyprawy',
    COUNT(t.trip_id) AS 'Liczba wypraw',
    COALESCE(SUM(ac.total_trip_cost), 0) AS 'Ca≈Çkowite koszty',
    COALESCE(SUM(ar.total_trip_revenue), 0) AS 'Ca≈Çkowite przychody',
    (COALESCE(SUM(ar.total_trip_revenue), 0) - COALESCE(SUM(ac.total_trip_cost), 0)) AS 'Zysk'
FROM
    trip_types tt
LEFT JOIN
    trips t ON tt.trip_type_id = t.trip_type_id
LEFT JOIN
    (SELECT trip_id, SUM(cost_amount) AS total_trip_cost FROM costs GROUP BY trip_id) ac 
    ON t.trip_id = ac.trip_id
LEFT JOIN
    (SELECT trip_id, SUM(amount) AS total_trip_revenue FROM transactions WHERE status = 'Completed' GROUP BY trip_id) ar 
    ON t.trip_id = ar.trip_id
GROUP BY
    tt.name
ORDER BY
    `Liczba wypraw` DESC;
"""
```

```{python}
df_profitability = pd.read_sql(query, con)
con.close()

print("Analiza popularno≈õci i op≈Çacalno≈õci rodzaj√≥w wypraw:")
print(df_profitability.to_string())
```
```{python}
print("\n\n--- Zautomatyzowana Analiza ---")
print("\n## üèÜ TOP 3 najpopularniejsze rodzaje wypraw:\n")
top_3_profitability = df_profitability.head(3)

for index, row in top_3_profitability.iterrows():
    print(
        f"{index + 1}. Rodzaj '{row['Rodzaj wyprawy']}': "
        f"{row['Liczba wypraw']} wypraw, "
        f"kt√≥re przynios≈Çy {row['Ca≈Çkowite przychody']:.2f} przychodu."
    )

print("\n## üí∞ Analiza rentowno≈õci rodzaj√≥w wypraw:\n")
unprofitable_types = df_profitability[df_profitability['Zysk'] < 0]
if unprofitable_types.empty:
    print("‚úÖ Wszystkie rodzaje wypraw sƒÖ op≈Çacalne i nie przynoszƒÖ strat.")
else:
    print("‚ö†Ô∏è UWAGA! NastƒôpujƒÖce rodzaje wypraw przynoszƒÖ straty:")
    for index, row in unprofitable_types.iterrows():
        print(
            f"- '{row['Rodzaj wyprawy']}': zanotowano stratƒô w wysoko≈õci {-row['Zysk']:.2f}"
        )

print("\n----------------------------------")
```
```{python}
con = mysql.connector.connect(
    host="giniewicz.it",
    user="team13",
    password="te@mlie",
    database="team13"
)

query_clients_per_month = """
SELECT
    DATE_FORMAT(t.departure_datetime, '%Y-%m') AS miesiac,
    COUNT(tp.client_id) AS liczba_klientow
FROM
    trips t
JOIN
    trip_participants tp ON t.trip_id = tp.trip_id
GROUP BY
    miesiac
ORDER BY
    miesiac ASC;
"""
```
```{python}
df_clients = pd.read_sql(query_clients_per_month, con)
```

```{python}
plt.figure(figsize=(14, 7))
sns.barplot(data=df_clients, x='miesiac', y='liczba_klientow', color='steelblue')
plt.title('Miesiƒôczna liczba obs≈Çu≈ºonych klient√≥w', fontsize=16)
plt.xlabel('MiesiƒÖc', fontsize=12)
plt.ylabel('Liczba klient√≥w', fontsize=12)
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()
```

```{python}
x = np.arange(len(df_clients)) 
y = df_clients['liczba_klientow'] 
slope, intercept, r_value, p_value, std_err = stats.linregress(x, y)
# Ustalamy pr√≥g "stagnacji", aby uniknƒÖƒá klasyfikowania bardzo ma≈Çych waha≈Ñ
# jako trendu. Np. je≈õli wzrost/spadek jest mniejszy ni≈º 0.5 klienta na miesiƒÖc.
stagnation_threshold = 0.5

if slope > stagnation_threshold:
    wniosek = f"Firma wykazuje wyra≈∫ny trend WZROSTOWY."
    szczegoly = f"≈örednio, z ka≈ºdym miesiƒÖcem liczba klient√≥w ro≈õnie o {slope:.2f}."
elif slope < -stagnation_threshold:
    wniosek = f"Firma wykazuje wyra≈∫ny trend SPADKOWY."
    szczegoly = f"≈örednio, z ka≈ºdym miesiƒÖcem liczba klient√≥w maleje o {-slope:.2f}."
else:
    wniosek = "Firma wykazuje STAGNACJƒò."
    szczegoly = f"Brak wyra≈∫nego trendu wzrostowego lub spadkowego (nachylenie linii trendu wynosi {slope:.2f})."
print("--- Automatyczna Analiza Trendu ---")
print(f"Wsp√≥≈Çczynnik nachylenia linii trendu: {slope:.4f}")
print(f"\nWniosek: {wniosek}")
print(szczegoly)
print("-----------------------------------")
```