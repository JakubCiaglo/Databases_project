---
title: "Projekt z Baz Danych ‚Äì Raport Ko≈Ñcowy"
format:
  html:
    toc: true
    number-sections: true
    code-fold: true
    code-summary: "Rozwi≈Ñ kod"
    theme:
      light: flatly
      dark: darkly
page-layout: full
---

# Autorzy

- Jakub CiƒÖg≈Ço  
- Mateusz ƒÜwiek  
- Marek Dworaczyk  
- Rafa≈Ç G≈Çodek

# Importy
```{python}
#| echo: false
#| include: false
import random
import math
from datetime import date, datetime, timedelta, time
import numpy as np
import pandas as pd
import mysql.connector
import plotly.express as px
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import matplotlib.colors as colors
from IPython.display import display, Markdown
from datetime import datetime
from scipy import stats
from sqlalchemy import create_engine
from urllib.parse import quote_plus
```


# Ustanowienie po≈ÇƒÖczenia
```{python}
#| echo: false
#| include: false
con = mysql.connector.connect(
    host = "giniewicz.it",
    user = "team13",
    password = "te@mlie",
    port=3306,
    use_pure=True,
    database = "team13"
)

cursor = con.cursor()


# pr√≥ba uruchomienia po≈ÇƒÖczenia jak rafa≈Ç ==========================
# host = "giniewicz.it"
# user = "team13"
# password = "te@mlie"
# database = "team13"
# safe_password = quote_plus(password)

# connection_uri = f"mysql+mysqlconnector://{user}:{safe_password}@{host}/{database}"
# engine = create_engine(connection_uri)

```

# Analiza danych

## Zadanie 3


```{python}
#| echo: false
#| include: false
def df_summary_markdown(df):
    summary_planeta = df['Planeta'].value_counts().reset_index()
    summary_planeta.columns = ['Planeta', 'liczba']

    summary_typ = df['Rodzaj'].value_counts().reset_index()
    summary_typ.columns = ['Rodzaj', 'liczba']

    summary_pojazd = df['Spacecraft'].value_counts().reset_index()
    summary_pojazd.columns = ['Spacecraft', 'liczba']

    markdown = "Podsumowanie \n"

    # üåç Planety
    if summary_planeta["liczba"][0] == 1:
        markdown += "<p>üî∏ Wszystkie planety wystƒôpujƒÖ r√≥wnie czƒôsto.</p>\n"
    else:
        markdown += (
            f"<p>üåç Najczƒô≈õciej wystƒôpujƒÖca planeta to <b>{summary_planeta['Planeta'][0]}</b> "
            f"z liczbƒÖ <b>{summary_planeta['liczba'][0]}</b> wypraw.</p>\n"
        )

    # üß≠ Typ wyprawy
    if summary_typ["liczba"][0] == 1:
        markdown += "<p>üî∏ Wszystkie rodzaje wycieczek wystƒôpujƒÖ r√≥wnie czƒôsto.</p>\n"
    else:
        markdown += (
            f"<p>üß≠ Najczƒôstszy rodzaj wycieczki to <b>{summary_typ['Rodzaj'][0]}</b> "
            f"({summary_typ['liczba'][0]} razy).</p>\n"
        )

    # üöÄ Pojazdy
    if summary_pojazd["liczba"][0] == 1:
        markdown += "<p>üî∏ Wszystkie pojazdy kosmiczne wystƒôpujƒÖ r√≥wnie czƒôsto.</p>\n"
    else:
        markdown += (
            f"<p>üöÄ Najczƒô≈õciej u≈ºywany pojazd kosmiczny to <b>{summary_pojazd['Spacecraft'][0]}</b> "
            f"(u≈ºyty {summary_pojazd['liczba'][0]} razy).</p>\n"
        )

    display(Markdown(markdown))
```

### Analiza wycieczek: wycieczki z najwiƒôkszƒÖ liczbƒÖ jednorazowych klient√≥w
```{python}
query_one_timers = """SELECT 
    client_id, 
    COUNT(trip_id) as trips 
    FROM  trip_participants 
    GROUP BY client_id
    HAVING trips = 1"""
cursor.execute(query_one_timers)
one_time_clients = np.array(cursor.fetchall())
one_time_ids = one_time_clients[:,0]

client_ids = list(map(int, one_time_ids.tolist()))
placeholders = ','.join(['%s'] * len(client_ids))

query_one_time_trips = f"""
    SELECT trip_id, COUNT(*) as count
    FROM trip_participants
    WHERE client_id IN ({placeholders})
    GROUP BY trip_id
    ORDER BY count DESC
"""
cursor.execute(query_one_time_trips, client_ids)
results = np.array(cursor.fetchall())

one_time_trips = results[:,0]

trip_ids = [int(t) for t in one_time_trips] 
placeholders = ','.join(['%s'] * len(trip_ids))

query_trip_info = f"""
    SELECT 
        d.name AS destination,
        tt.name AS trip_type,
        s.name AS spacecraft_name,
        r.name AS rocket_name,
        t.trip_id
    FROM trip_participants tp
    JOIN trips t ON tp.trip_id = t.trip_id
    JOIN spacecraft s ON t.spacecraft_id = s.spacecraft_id
    JOIN rockets r ON t.rocket_id = r.rocket_id
    JOIN destinations d ON t.destination_id = d.destination_id
    JOIN trip_types tt ON t.trip_type_id = tt.trip_type_id
    WHERE tp.trip_id IN ({placeholders})
    GROUP BY t.trip_id, d.name, tt.name
"""
cursor.execute(query_trip_info, trip_ids)
results = cursor.fetchall()

df_disliked_trips = pd.DataFrame(results, columns=["Planeta", "Rodzaj", "Spacecraft", "Rocket","Id"])
df_disliked_trips.index = pd.RangeIndex(start=1, stop=len(df_disliked_trips)+1)

# print(df_disliked_trips.to_string())

display(df_disliked_trips.head(10))

df_summary_markdown(df_disliked_trips.head(10))
```

### Analiza wycieczek: wycieczki, kt√≥re najczƒô≈õciej by≈Çy ostatnimi.
```{python}
placeholders = ','.join(['%s'] * len(one_time_ids))
one_time_ids = [int(t) for t in one_time_ids] 

query_last_trips = f"""
SELECT
    tp.client_id,
    t.trip_id
FROM
    trip_participants tp
JOIN trips t ON tp.trip_id = t.trip_id
WHERE
    tp.client_id NOT IN ({placeholders})
    AND t.departure_datetime = (
        SELECT MAX(t2.departure_datetime)
        FROM trip_participants tp2
        JOIN trips t2 ON tp2.trip_id = t2.trip_id
        WHERE tp2.client_id = tp.client_id
    )
ORDER BY tp.client_id;
"""

cursor.execute(query_last_trips, one_time_ids)
results = np.array(cursor.fetchall())


df = pd.DataFrame(results, columns=['client_id', 'trip_id'])

summary = df['trip_id'].value_counts().reset_index()
summary.columns = ['trip_id', 'num_clients']

summary = summary.sort_values(by='num_clients', ascending=False)
last_trips_ids = summary["trip_id"]

last_trips_ids = [int(t) for t in last_trips_ids] 
placeholders = ','.join(['%s'] * len(last_trips_ids))

query_trip_info = f"""
    SELECT 
        d.name AS destination,
        tt.name AS trip_type,
        s.name AS spacecraft_name,
        r.name AS rocket_name,
        t.trip_id
    FROM trip_participants tp
    JOIN trips t ON tp.trip_id = t.trip_id
    JOIN spacecraft s ON t.spacecraft_id = s.spacecraft_id
    JOIN rockets r ON t.rocket_id = r.rocket_id
    JOIN destinations d ON t.destination_id = d.destination_id
    JOIN trip_types tt ON t.trip_type_id = tt.trip_type_id
    WHERE tp.trip_id IN ({placeholders})
    GROUP BY t.trip_id, d.name, tt.name
"""

cursor.execute(query_trip_info, last_trips_ids)
results = cursor.fetchall()

df_last_trips = pd.DataFrame(results, columns = ["Planeta", "Rodzaj", "Spacecraft", "Rocket","Id"])
df_last_trips.index = pd.RangeIndex(start=1, stop=len(df_last_trips)+1)
display(df_last_trips.head(10))
df_summary_markdown(df_last_trips.head(10))
```

### Analiza wycieczek: wycieczki po kt√≥rych klienci wr√≥cili.

```{python}
query= """
  SELECT tp.client_id, tp.trip_id,t.departure_datetime 
  FROM trip_participants tp
  JOIN trips t ON tp.trip_id = t.trip_id
  ORDER BY tp.client_id, t.departure_datetime;"""

cursor.execute(query)
results = np.array(cursor.fetchall())

df = pd.DataFrame(results,columns=["client_id","trip_id","departure"])

df['next_trip'] = df.groupby('client_id')['trip_id'].shift(-1)

df['returned_after'] = df['next_trip'].notna()


trip_retention = df[df['returned_after']].groupby('trip_id').size().reset_index(name='clients_returned')
trip_retention = trip_retention.sort_values(by='clients_returned', ascending=False)
top_5_ret_ids = trip_retention.head(10)["trip_id"]
top_5_ret_ids = [int(t) for t in top_5_ret_ids] 
placeholders = ','.join(['%s'] * len(top_5_ret_ids))

query = f"""
    SELECT 
        d.name AS destination,
        tt.name AS trip_type,
        s.name AS spacecraft_name,
        r.name AS rocket_name,
        t.trip_id
    FROM trip_participants tp
    JOIN trips t ON tp.trip_id = t.trip_id
    JOIN spacecraft s ON t.spacecraft_id = s.spacecraft_id
    JOIN rockets r ON t.rocket_id = r.rocket_id
    JOIN destinations d ON t.destination_id = d.destination_id
    JOIN trip_types tt ON t.trip_type_id = tt.trip_type_id
    WHERE tp.trip_id IN ({placeholders})
    GROUP BY t.trip_id, d.name, tt.name
"""
cursor.execute(query, top_5_ret_ids)
results = cursor.fetchall()

df_liked_trips = pd.DataFrame(results, columns = ["Planeta", "Rodzaj", "Spacecraft", "Rocket","Id"])
df_liked_trips.index = pd.RangeIndex(start=1, stop=len(df_liked_trips)+1)
display(df_liked_trips.head(10))
df_summary_markdown(df_liked_trips)
```


## Zadanie 4
### Analiza pracownik√≥w: interesujƒÖcy nas pracownicy

Wszystkie role:

In≈ºynier system√≥w, Administrator IT, Technik pok≈Çadowy, Analityk danych, Marketing kosmiczny, Inspektor jako≈õci, Pilot statku, Specjalista ds. bezpiecze≈Ñstwa, Finanse / Ksiƒôgowo≈õƒá, Astrogator, Mechanik rakietowy, Lekarz pok≈Çadowy, Kontroler lot√≥w, Kucharz orbitalny, Specjalista HR

Role bezpo≈õredniego kontatku:
Pilot statku, Specjalista ds. bezpiecze≈Ñstwa,Lekarz pok≈Çadowy, Kucharz orbitalny

### Analiza pracownik√≥w: najwy≈ºsze ratingi
```{python}
roles_of_interest = ["Pilot statku", "Specjalista ds. bezpiecze≈Ñstwa","Lekarz pok≈Çadowy", "Kucharz orbitalny"]
placeholders = ','.join(['%s'] * len(roles_of_interest))
query = f"""
SELECT
    e.first_name,
    e.last_name,
    e.position,
    f.trip_id,
    ea.employee_id,
    f.rating
FROM employee_assignments ea
JOIN employees e ON ea.employee_id = e.employee_id
JOIN feedback f ON ea.trip_id = f.trip_id
"""

cursor.execute(query)
results_ratings = cursor.fetchall()

df_ratings_all = pd.DataFrame(results_ratings, columns=[ "first_name", "last_name", "position", "trip_id","employee_id", "rating"])
avg_ratings_all = df_ratings_all.groupby(['first_name', 'last_name', 'position','employee_id'])['rating'].mean().reset_index()
avg_ratings_all["rating"] = round(avg_ratings_all["rating"],2)
avg_ratings_all = avg_ratings_all.sort_values(by="rating", ascending=False)


df_ratings_interest = df_ratings_all[df_ratings_all["position"].isin(roles_of_interest)]
avg_ratings_interest = df_ratings_interest.groupby(['first_name', 'last_name', 'position','employee_id'])['rating'].mean().reset_index()
avg_ratings_interest["rating"] = round(avg_ratings_interest["rating"],2)
avg_ratings_interest = avg_ratings_interest.sort_values(by="rating", ascending=False)

# Poka≈º topowych pracownik√≥w
display(avg_ratings_interest.head(5).style.hide(axis="index"))

best_employee = avg_ratings_interest.iloc[0]

markdown_text = f"""
### üë®‚ÄçüöÄ Najlepszy pracownik z listy

**Imiƒô i nazwisko:** {best_employee['first_name']} {best_employee['last_name']}  
**Stanowisko:** {best_employee['position']}  
**ID pracownika:** {best_employee['employee_id']}  
**Ocena:** {best_employee['rating']}
"""

markmarkdown_text = f"""
üë®‚ÄçüöÄ Najlepszym pracownikiem okaza≈Ç jest **{best_employee['first_name']} {best_employee['last_name']}** o ID {best_employee['employee_id']} , kt√≥ry przys≈Çu≈ºy≈Ç nam siƒô pracujƒÖc jako **{best_employee['position']}**. Uzyskana ocena wynosi **{best_employee['rating']}**.
"""

# Wy≈õwietlenie markdowna
display(Markdown(markmarkdown_text))

```

### Analiza pracownik√≥w: najwiƒôcej wycieczek

```{python}
query="""
SELECT
    e.first_name,
    e.last_name,
    e.position,
    ea.employee_id,
    COUNT(ea.trip_id) AS trips_assigned
FROM employee_assignments ea
JOIN employees e ON ea.employee_id = e.employee_id
GROUP BY ea.employee_id, e.first_name, e.last_name, e.position
ORDER BY trips_assigned DESC;
"""
cursor.execute(query)
results_activity = cursor.fetchall()
# Za≈Çaduj dane z SQL do DataFrame
df_acvitivy = pd.DataFrame(results_activity, columns=["first_name", "last_name", "position","employee_id", "trips_assigned"])

# Filtrowanie po roli
df_acvitivy_interest = df_acvitivy[df_acvitivy["position"].isin(roles_of_interest)]

# Posortuj i poka≈º najbardziej pracowitych w wybranych rolach
most_active = df_acvitivy.sort_values(by="trips_assigned", ascending=False)
most_active_of_interest = df_acvitivy_interest.sort_values(by="trips_assigned", ascending=False)

display(most_active.head(5).style.hide(axis="index"))

most_active_employee = most_active.iloc[0]

markmarkdown_text = f"""
üë®‚ÄçüöÄ Najbardziej aktywnym pracownikiem okaza≈Ç jest **{most_active_employee['first_name']} {most_active_employee['last_name']}** o ID {most_active_employee['employee_id']} , kt√≥ry przys≈Çu≈ºy≈Ç nam siƒô pracujƒÖc jako **{most_active_employee['position']}**. Liczba wycieczek, na kt√≥re mia≈Ç wp≈Çyw ten niesamowity pracownik wynosi **{most_active_employee['trips_assigned']}**.
"""
display(Markdown(markmarkdown_text))
```

### Analiza pracownik√≥w: por√≥wnanie wynik√≥w


```{python}

def ocena(percent):
    if percent > 90:
        return "wy≈õmienity"
    elif percent > 75:
        return "bardzo dobry"
    elif percent > 50:
        return "dobry"
    elif percent > 25:
        return "umiarkowany"
    elif percent > 10:
        return "nie najlepszy"
    else:
        return "s≈Çaby"                

best_employee_activity = df_acvitivy[df_acvitivy["employee_id"] == best_employee["employee_id"]]
most_active_employee_rating = avg_ratings_all[avg_ratings_all["employee_id"]== most_active_employee["employee_id"]]

df_acvitivy = df_acvitivy.reset_index(drop=True)
position = df_acvitivy.index[df_acvitivy["employee_id"] == best_employee["employee_id"]]


rank = position[0] + 1  # +1 bo indeksy zaczynajƒÖ siƒô od 0
total = len(df_acvitivy)
percent_rank = 100 * (1 - (rank - 1) / (total - 1)) if total > 1 else   100
employee_rating = df_acvitivy.loc[position[0]]

markmarkdown_text = f"""
Najlepiej oceniany pracownik, **{best_employee['first_name']} {best_employee['last_name']}**, wziƒÖ≈Ç udzia≈Ç w {employee_rating["trips_assigned"]} wyprawach, co jest wiƒôcej ni≈º {percent_rank:.1f}% pracownik√≥w. Jest to {ocena(percent_rank)} wynik.
"""

display(Markdown(markmarkdown_text))

avg_ratings_all = avg_ratings_all.reset_index(drop=True)
position = avg_ratings_all.index[avg_ratings_all["employee_id"] == most_active_employee["employee_id"]]


rank = position[0] + 1  # +1 bo indeksy zaczynajƒÖ siƒô od 0
total = len(df_acvitivy)
percent_rank = 100 * (1 - (rank - 1) / (total - 1)) if total > 1 else   100
employee_rating = avg_ratings_all.loc[position[0]]

markmarkdown_text = f"""
Najaktywniejszy pracownik, **{most_active_employee['first_name']} {most_active_employee['last_name']}**, uzyska≈Ç rating {employee_rating["rating"]}, co jest wynikiem lepszym od {percent_rank:.1f}% pracownik√≥w. Jest to {ocena(percent_rank)} wynik.
"""
display(Markdown(markmarkdown_text))
```


## Zadanie 5
### Sezonowo≈õƒá naszych wypraw. Czy mo≈ºna zauwa≈ºyƒá zale≈ºno≈õƒá pomiƒôdzy sezonowo≈õciƒÖ wypraw a sezonowo≈õciƒÖ incydent√≥w?


```{python}
query = """SELECT trip_id, departure_datetime FROM trips;"""
cursor.execute(query)
results = cursor.fetchall()

df = pd.DataFrame(results, columns=["trip_id","departure_datetime"])

dates = [str(s) for s in df["departure_datetime"]] 
df["departure_datetime"] = dates

df['departure_datetime'] = df['departure_datetime'].apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S'))
df['year_month'] = df['departure_datetime'].apply(lambda x: f"{x.year}-{x.month:02d}")
df['year'] = df['departure_datetime'].apply(lambda x: x.year)
df['month'] = df['departure_datetime'].apply(lambda x: x.month)

trip_counts = df['month'].value_counts().sort_index()

query = """SELECT incident_id, datetime_occurred FROM incidents;"""
cursor.execute(query)
results = cursor.fetchall()

df = pd.DataFrame(results, columns=["id","datetime"])

dates = [str(s) for s in df["datetime"]] 
df["datetime"] = dates
df['datetime'] = df['datetime'].apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S'))
df['year_month'] = df['datetime'].apply(lambda x: f"{x.year}-{x.month:02d}")
df['year'] = df['datetime'].apply(lambda x: x.year)
df['month'] = df['datetime'].apply(lambda x: x.month)

incidents_counts = df['month'].value_counts().sort_index()

all_months = list(range(1, 13))
trip_counts = trip_counts.reindex(all_months, fill_value=0)
incidents_counts = incidents_counts.reindex(all_months, fill_value=0)

x = np.arange(len(all_months))
width = 0.35

fig, ax = plt.subplots(figsize=(10, 5))

bars1 = ax.bar(x - width/2, trip_counts.values, width, label='Liczba wycieczek')
bars2 = ax.bar(x + width/2, incidents_counts.values, width, label='Liczba incydent√≥w')

ax.set_xlabel('MiesiƒÖc')
ax.set_ylabel('Liczba')
ax.set_title('Por√≥wnanie liczby wycieczek i incydent√≥w wg miesiƒÖca')
ax.set_xticks(x)
ax.set_xticklabels([f"{m:02d}" for m in all_months])
ax.legend()

plt.tight_layout()
plt.show()
```


## Zadanie 6
### Czy klienci dokonujƒÖ p≈Çatno≈õci za przejazdy z wyprzedzeniem, czy czekajƒÖ do ostatniej chwili?

```{python}
query="""SELECT
    ts.client_id,
    ts.trip_id,
    ts.transaction_date,
    t.departure_datetime,
    DATEDIFF(t.departure_datetime, ts.transaction_date) AS days_before_trip
FROM transactions ts
JOIN trips t ON ts.trip_id = t.trip_id;"""

cursor.execute(query)
results = cursor.fetchall()
df = pd.DataFrame(results, columns=["client_id","trip_id","transaction_date","departure_date","diff"])

bins = [-100, 0, 3, 7, 14, 30, 90, 365]
labels = ['Po czasie', '0-3 dni', '4-7 dni', '8-14 dni', '15-30 dni', '31-90 dni', '91+ dni']
df['payment_window'] = pd.cut(df['diff'], bins=bins, labels=labels)

summary = df['payment_window'].value_counts().sort_index()

summary.plot(kind='bar', color='skyblue')
plt.title('Kiedy klienci p≈ÇacƒÖ za wycieczki?')
plt.xlabel('Ile dni przed wyjazdem dokonano p≈Çatno≈õci')
plt.ylabel('Liczba p≈Çatno≈õci')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

```



## Zadanie 7
### Ulubione metody p≈Çatno≈õci naszych klient√≥w. Z jakiego ≈∫r√≥d≈Ça wp≈Çywa najwiƒôcej pieniƒôdzy. Czy mo≈ºe mamy rozwinƒÖƒá ten system

```{python}
query="""SELECT
    payment_method,
    COUNT(*) AS total_transactions,
    SUM(amount) AS total_amount
FROM transactions
WHERE status = 'completed'
GROUP BY payment_method
ORDER BY total_amount DESC;"""

cursor.execute(query)
results = cursor.fetchall()
df_methods = pd.DataFrame(results, columns=["payment_method","total_transactions","total_amount"])

bins = [-100, 0, 3, 7, 14, 30, 90, 365]
labels = ['Po czasie', '0-3 dni', '4-7 dni', '8-14 dni', '15-30 dni', '31-90 dni', '91+ dni']
df['payment_window'] = pd.cut(df['diff'], bins=bins, labels=labels)

plt.figure(figsize=(10,6))
plt.bar(df_methods["payment_method"], df_methods["total_amount"], color='skyblue')
plt.xlabel("Metoda p≈Çatno≈õci")
plt.ylabel("≈ÅƒÖczna kwota (PLN lub waluta)")
plt.title("≈πr√≥d≈Ça najwiƒôkszego przychodu wg metody p≈Çatno≈õci")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Drugi wykres - liczba transakcji
plt.figure(figsize=(10,6))
plt.bar(df_methods["payment_method"], df_methods["total_transactions"], color='lightgreen')
plt.xlabel("Metoda p≈Çatno≈õci")
plt.ylabel("Liczba transakcji")
plt.title("Popularno≈õƒá metod p≈Çatno≈õci wg liczby u≈ºyƒá")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

```

##